# -*- coding: utf-8 -*-
"""Contextualizing the Philippines' Socioeconomic Crisis-Emigration SQL Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iIc36AXbzaMS8R7PyF4EzumjD8y4gImw

# **Contextualizing the Philippines' Socioeconomic Crisis**
## **Part 1: Emigration Analysis with SQLite**

The Philippines' deepening scocioeconomic crisis has left millions impoverished and have forced many to leave the country for countries that emigrants believe would have a higher quality of life, and therefore, would be conducive in helping them earn a living wage for themselves and their famillies (e.g., Canada, United Arab Emirates, Australia). Using emigration data from Our World in Data, and SQL queries via the sqlite3 library, we will compare the Philippines' emigration numbers with other countries and other regions, mainly Southeast Asian countries.

**Dataset:** https://ourworldindata.org/migration

**Description:** This dynamic dataset tracks the number of people living outside of their country of birth, and categorizes the data both as geospatial  and as time-series data (i.e., by country/region and by year).

### Connect to the database
"""

# Install necessary sql libraries
!pip install ipython-sql
!pip install ipython-sql prettytable

# Import relevant libraries
import csv, sqlite3
import prettytable
prettytable.DEFAULT = 'DEFAULT'

import pandas as pd

# Commented out IPython magic to ensure Python compatibility.
# %load_ext sql

# Establish a connection to the database (or create it if it doesn't exist)
con = sqlite3.connect('your_database.db')

emigrants_df = pd.read_csv("total-number-of-emigrants.csv") # Load csv downloaded from website

# Use the 'con' variable in the to_sql function
emigrants_df.to_sql("EMIGRANTS DB", con, if_exists='replace', index=False, method="multi")

# It is a good practice to close the database connection when you are done with it.
con.close()

# Commented out IPython magic to ensure Python compatibility.
# %sql sqlite:///your_database.db

"""### Investigate database"""

# Commented out IPython magic to ensure Python compatibility.
# Load database
# %sql SELECT * FROM `EMIGRANTS DB`

# Commented out IPython magic to ensure Python compatibility.
# This query filters for the years 1990 and 2024. The aim is to calculate the growth rates of total emigrants for the
# countries and regions of interest from the years 1990-2024.
# %sql SELECT * FROM `EMIGRANTS DB` WHERE YEAR = 1990 OR YEAR=2024 LIMIT 10

# Commented out IPython magic to ensure Python compatibility.
# This query loads data for the total number of emigrants that originate from the Philippines
# in the years 1990 and 2024.
# %sql SELECT * FROM `EMIGRANTS DB` WHERE (YEAR = 1990 OR YEAR=2024) AND ENTITY = 'Philippines'

# Commented out IPython magic to ensure Python compatibility.
# A similar query can be executed to get the same data but for the rest of the Southeast Asian countries.
# Since East Timor was not widely recognized as a sovereign country until 2002, it has been excluded from the analysis.
# %sql SELECT * FROM `EMIGRANTS DB` WHERE (YEAR = 1990 OR YEAR=2024) AND (ENTITY = 'Brunei' OR ENTITY = 'Cambodia' \
OR ENTITY = 'Indonesia' OR ENTITY = 'Laos' OR ENTITY = 'Malaysia' OR ENTITY = 'Myanmar' OR ENTITY = 'Singapore' OR ENTITY = 'Thailand' OR ENTITY = 'Vietnam')

# Commented out IPython magic to ensure Python compatibility.
# The following query extracts data for the whole world and entities named "Asia".
# The LIKE clause was utilized as it was unknown what name was used for the Southeast Asia region.
# It indeed deviates from the more commonly used term, as Our World in Data used "South-Eastern Asia (UN)".
# %sql SELECT * FROM `EMIGRANTS DB` WHERE (YEAR = 1990 OR YEAR=2024) AND (ENTITY LIKE '%Asia%' OR ENTITY='World')

"""### Creating Temporary Tables, then Converting to Pandas Dataframe

Temporary tables allow user to create intermediate tables that show a subset of data without affecting the original database. It is akin to filtering in Excel, where one can see a specific subset of data in a speadsheet without changing the spreadsheet itself.
"""

# Commented out IPython magic to ensure Python compatibility.
# Create temporary table for countries and regions of interest, filtering for year 1990.
# %sql CREATE TEMPORARY TABLE filter_data1 AS \
SELECT * \
FROM `EMIGRANTS DB` \
WHERE YEAR = 1990 \
AND (ENTITY = 'Brunei' OR ENTITY = 'Cambodia' \
OR ENTITY = 'Indonesia' OR ENTITY = 'Laos' OR ENTITY = 'Malaysia' OR ENTITY = 'Myanmar' OR ENTITY = 'Philippines' \
OR ENTITY = 'Singapore' OR ENTITY = 'Thailand' OR ENTITY = 'Vietnam' OR ENTITY = 'Asia' OR ENTITY = 'South-Eastern Asia (UN)' OR ENTITY = 'World')

# Commented out IPython magic to ensure Python compatibility.
# Create temporary table for countries and regions of interest, filtering for year 2024.
# %sql CREATE TEMPORARY TABLE filter_data2 AS \
SELECT * \
FROM `EMIGRANTS DB` \
WHERE YEAR = 2024 \
AND (ENTITY = 'Brunei' OR ENTITY = 'Cambodia' \
OR ENTITY = 'Indonesia' OR ENTITY = 'Laos' OR ENTITY = 'Malaysia' OR ENTITY = 'Myanmar' OR ENTITY = 'Philippines' \
OR ENTITY = 'Singapore' OR ENTITY = 'Thailand' OR ENTITY = 'Vietnam' OR ENTITY = 'Asia' OR ENTITY = 'South-Eastern Asia (UN)' OR ENTITY = 'World')

# Commented out IPython magic to ensure Python compatibility.
# Join both temporary tables into a new temporary table.
# %sql CREATE TEMPORARY TABLE new_data AS \
SELECT * FROM filter_data1 JOIN filter_data2 ON filter_data1.ENTITY = filter_data2.ENTITY

# Commented out IPython magic to ensure Python compatibility.
# Load temporary table. The new tables render arithmetic operations to calculate rates of change much easier.
# %sql SELECT * FROM new_data

# Commented out IPython magic to ensure Python compatibility.
# Drop "Year:1" column, as it is unnecessary for further analysis.
# %sql ALTER TABLE new_data \
DROP COLUMN 'Year:1'

# Commented out IPython magic to ensure Python compatibility.
# Drop "Year" column, as it is unnecessary for further analysis.
# %sql ALTER TABLE new_data \
DROP COLUMN 'Year'

# Commented out IPython magic to ensure Python compatibility.
# Drop "Entity:1" column, as it is unnecessary for further analysis.
# %sql ALTER TABLE new_data \
DROP COLUMN 'Entity:1'

# Commented out IPython magic to ensure Python compatibility.
# Rename both emigrants columns appropriately.
# %sql ALTER TABLE new_data \
RENAME COLUMN 'Total number of emigrants' TO 'Total number of emigrants (1990)'

# Commented out IPython magic to ensure Python compatibility.
# %sql ALTER TABLE new_data \
RENAME COLUMN 'Total number of emigrants:1' TO 'Total number of emigrants (2024)'

# Once complete, assign to variable.
New_data=%sql SELECT * FROM new_data

# Convert data into pandas dataframe.
New_data_df=New_data.DataFrame()

# Create new column in dataframe, which calculates the growth rate of emigrants in percentage.
New_data_df['% Change in Number of Emigrants'] = (New_data_df['Total number of emigrants (2024)'] - New_data_df['Total number of emigrants (1990)']) / New_data_df['Total number of emigrants (1990)'] *100

New_data_df

"""### Visualizing Emigration

It is possible to compare the Philippines' emigration data with other countries and regions just based off the dataframe, but it is not conducive for presenting findings, especially for non-technical stakeholders who may not have a lot of time to spare staring at the table. Therefore, data visualization with seaborn will be used.
"""

# Import seaborn, and set theme.
import seaborn as sns

sns.set_theme(style="whitegrid")

clrs = ['orange' if x == 'Philippines' else 'blue' for x in New_data_df['Entity']] # To highlight the bar associated with the Philippines.
# Orange and blue are typically the best two colours to use for seaborn plots for accessibility purposes.
Plot=sns.barplot(x="Entity", y="% Change in Number of Emigrants", data=New_data_df, hue=clrs, legend=False)
Plot.set_xticklabels(Plot.get_xticklabels(), rotation=90)
Plot.set_title('Percentage Change in Number of Emigrants, 1990-2024')
Plot.set_xlabel('Entity')
Plot.set_ylabel('Percentage Change')

"""While not the highest, it is clear that the Philippines has amongst the highest emigration rates in Southeast Asia. It has a higher rate than Asia and the world, but is paradoxically lower that the overall rate for Southeast Asia.

Hower, despite the conclusion and the orange highlight, one may be more inclined to focus on Myanmar, whose bar visually dominates the plot. Without the context of the ongoing Rohingya refugee crisis and the ongoing civil war that began in 2021, those that are looking at this plot might at first be perplexed as to why Myanmar's data is such an anomaly.

Therefore, Myanmar will be dropped from the plot, both to consider its very exceptional circumstances as well as make the visual comparison of the Philippines' emigration rates easier to discern.
"""

# Filter the DataFrame to exclude 'Myanmar'
filtered_data = New_data_df[New_data_df['Entity'] != 'Myanmar']
clrs = ['orange' if x == 'Philippines' else 'blue' for x in filtered_data['Entity']]
Plot=sns.barplot(x="Entity", y="% Change in Number of Emigrants", data=filtered_data, hue=clrs, legend=False)
Plot.set_xticklabels(Plot.get_xticklabels(), rotation=90)
Plot.set_title('Percentage Change in Number of Emigrants, 1990-2024 (Excluding Myanmar)')
Plot.set_xlabel('Entity')
Plot.set_ylabel('Percentage Change')

"""The differences now look more visible. The same conclusion can be drawn, but a plot like this optimizes the process.

### Discussion

Why are many Filipinos leaving the country, and at a higher rate than emgirants from most of its neighbours? It is something that cannot be boiled down to a simple sentence due to its long history of colonialism, successive governments that failed to deliver on improving the lives of its people, and unequal relationships with foreign companies and more powerful countries. One should also be mindful about assuming that Filipinos are a monolith who share the exact same motivations and conditions surrounding their emigration. However, it is safe to say that the Labour Export Policy introduced by former President Ferdinand Marcos Sr. in the 1970s helped accelerate emigration. In the next section, we will contextualize the ongoing socioeconomic crisis in the Philippines through a dashboard visualization, and help get a better understanding of the conditions of the people living in the Philippines and, therefore, understand the ongoing exodus of Filipinos out of the country.
"""